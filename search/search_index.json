{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about-the-project","title":"About the Project","text":"<p>This project involves communicating from a computer to a Adafruit Trinket M0 board using Dart. The board is connected to our computer using the Micro USB port.</p> <p>Our goal is to talk to a R553 fingerprint sensor through the Trinket M0 board. Luckily, the sensor based its protocol on the Adafruit Fingerprint library, and we can use the library to communicate with it. Our Dart and Python code are developed to use most of the functions in the library and more importantly, send and receive fingerprint templates back to the computer.</p> <p>The project is a framework or proof of concept for a Biometric Verification System with templates store in a database that can be use to verify users/customers/clients/etc. The Dart language also enables the developement of a mobile app on Android or IOS to use this system.</p> <p>This project is done on Linux with Window or MacOS being technically possible but requires more work compiling libserialport library to their platform. We have no guarantee that it will work in Window or MacOS as it has not been tested by us.</p> <p>Update: Midway through the project, we discovered that the Trinket M0 is unable to receive fingeprint templates due to the limited 32KB of RAM. We have replaced it with the Raspberry Pi Pico with 264KB of RAM and now that functionality is available</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>This section described how to quickly set up the code and start communicating with trinket m0.</p> <ol> <li>Download Dart SDK</li> <li>Download the project files in Github</li> <li> <p>Navigate to the folder and download dependencies of dart code</p> <pre><code>    dart pub upgrade\n</code></pre> </li> <li> <p>Download libserialport (C) library using</p> <pre><code>    sudo apt install libserialport-dev\n</code></pre> </li> <li> <p>Copy code.py and lib folder into Trinket M0/Raspberry Pi Pico</p> </li> <li> <p>Run the dart code</p> <pre><code>    dart communicate_trinket_m0.dart\n</code></pre> </li> <li> <p>(Optional) If the Dart code shows that the board is in REPL when first booted up, use command 'reset' by typing it in the terminal to restart the python code.</p> </li> </ol>"},{"location":"#example","title":"Example","text":""},{"location":"#setup","title":"Setup","text":"Trinket M0 board connected to fingerprint sensor Raspberry Pi Pico connected to fingerprint sensor"},{"location":"#connecting-to-the-board","title":"Connecting to the board","text":"<pre><code>Anon:~/Desktop/trinket_m0_communicate$ dart communicate_trinket_m0.dart\nListing available ports...\nPort Number 1: /dev/ttyACM0\n    Description: Pico - E6605481DB635C34\n    Manufacturer: Raspberry Pi\n    Serial Number: E6605481DB635C34\n    Product ID: 0x80f4\n    Vendor ID: 0x239a\n    Read/Write Available: true\nDone\nPlease select fingerprint port number (-1 to exit or 0 to list all available port):\n</code></pre> <p>Note: If Read/Write Available is False, make sure to close any serial console/terminal that is talking to the board. Ex: Serial Console in Mu Editor</p> <pre><code>Please select fingerprint port number ...: 1\n    Port 1 selected.\n    Port Name: /dev/ttyACM0\n    Description: Pico - E6605481DB635C34\n    Manufacturer: Raspberry Pi\n    Serial Number: E6605481DB635C34\n    Product ID: 0x80f4\n    Vendor ID: 0x239a\n\n    Current Configuration of /dev/ttyACM0\n    Baud rate: 9600\n    Number of Data Bits: 8\n    Number of Parity Bits: -1\n    Number of Stop Bits: 1\n    Rts Cts: 1 0\n    Dsr Dtr: 0 1\n    XonXoff: 2\n\nSetting /dev/ttyACM0 to default config based on working config (Linux -&gt; trinket m0)\nSuccess!\n    Current Configuration of /dev/ttyACM0\n    Baud rate: 115200\n    Number of Data Bits: 8\n    Number of Parity Bits: 0\n    Number of Stop Bits: 1\n    Rts Cts: 1 0\n    Dsr Dtr: 0 1\n    XonXoff: 2\n\nDart: Fingerprint Commands:\n    1 -&gt; Enroll fingerprint\n    2 -&gt; Identify fingerprint\n    3 -&gt; Delete fingerprint\n    4 -&gt; Enroll and send template back via USB\n    5 -&gt; Upload template, get fingerprint and verify\n    6 -&gt; Clear all templates in sensor's library\n    stop -&gt; end communication with board and exit\n    reset -&gt; Rerun code python on board (Send Ctrl + D command)\n\nDisplaying output from board...\n]0;code.py | 8.2.9\\]0;code.py | 8.2.9\\\nERROR 87\nREADTEMPLATE 1 2 3 5 8\n&gt;\n</code></pre>"},{"location":"#on-board-codepy-operations","title":"On board code.py operations","text":"<ol> <li> <p>Enroll fingerprint</p> <pre><code>Displaying output from board...\n]0;code.py | 8.2.9\\]0;code.py | 8.2.9\\\nERROR 87\nREADTEMPLATE 1 2 3 5 8\n&gt;1 4\n1 4\nFINGERREQUEST\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nREMOVEFINGER\nFINGERREQUEST\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nCREATEMODEL\nOKMODEL\nSTOREMODEL\nOKSTORAGE\nREADTEMPLATE 1 2 3 4 5 8\n&gt;\n</code></pre> </li> <li> <p>Identify fingerprint</p> <pre><code>READTEMPLATE 1 2 3 4 5 8\n&gt;2\n2\nFINGERREQUEST\nOKIMAGE\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nSEARCHING\nOKSEARCH 4 100\nREADTEMPLATE 1 2 3 4 5 8\n&gt;\n</code></pre> </li> <li> <p>Delete fingerprint template (in sensor)</p> <pre><code>READTEMPLATE 1 2 3 4 5 8\n&gt;3 8\n3 8\nOKDELETE\nREADTEMPLATE 1 2 3 4 5\n&gt;\n</code></pre> </li> <li> <p>Download template to computer</p> <pre><code>&gt;4\n4\nFINGERREQUEST\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nREMOVEFINGER\nFINGERREQUEST\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nCREATEMODEL\nOKMODEL\nSTOREMODEL\nOKSTORAGE\nTEMPDOWNLOAD\nOKDOWNLOAD 2048\nb'46704c69...(long hex data here)'\nREADTEMPLATE 1 2 3 4 5\n&gt;\n</code></pre> </li> <li> <p>Upload template to sensor</p> <pre><code>READTEMPLATE 1 2 3 4 5\n&gt;5\n5\n46704c69...(long hex data here)\nFINGERREQUEST\nOKIMAGE\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nOKMATCH\nREADTEMPLATE 1 2 3 4 5\n&gt;\n</code></pre> </li> <li> <p>Clear all fingerprint template on sensor</p> <pre><code>READTEMPLATE 1 2 3 4 5\n&gt;6\n6\nOKDELETE\nREADTEMPLATE 0\n&gt;\n</code></pre> </li> <li> <p>Cancle taking fingerprint</p> <pre><code>READTEMPLATE 2\n&gt;2\n2\nFINGERREQUEST\n^[\nCANCEL\nREADTEMPLATE 2\n&gt;\n</code></pre> </li> </ol>"},{"location":"pythondoc/","title":"CircuitPython Documentation","text":""},{"location":"pythondoc/#about-the-board","title":"About the board","text":"<p>The specifications for the Raspberry Pi Pico used in the project can be found here. For the Trinket M0, it is here.</p> <p>The version of CircuitPython flashed on the board is 8.2.9.</p> <p>For Raspberry Pi Pico, pin 1 and 2 is used as UART Tx and Rx respectively. Pin 37 and 38 is used as 3.3V power and Ground respectively.</p> Raspberry Pi Pico pinout. Source: Raspberry Pi Pico Documentation <p>For Trinket M0, pin 3 and 4 is used as UART Rx and Tx respectively. 3V and GND pin is used as their name suggested.</p> Trinket M0 pinout. Source: Learn Adafruit website"},{"location":"pythondoc/#code-acknowledgement","title":"Code Acknowledgement","text":"<p><code>code.py</code> and <code>custom_finger_lib.py</code> are heavily referenced from Adafruit CircuitPython Fingerprint github page (Python and C++), more specifically examples/fingerprint_r503.py and examples/fingerprint_template_file_compare.py, while <code>adafruit_fingerprint_reduced.py</code> is a copy from adafruit_fingerprint.py with unused functions removed. adafruit_fingerprint.cpp was also useful for listing all the possible error codes the sensor can return when using the functions in the library. Credit to the respective authors of these library codes.</p>"},{"location":"pythondoc/#python-code","title":"Python Code","text":""},{"location":"pythondoc/#set-up-connection-with-fingerprint-sensor","title":"Set up connection with fingerprint sensor","text":"<p>The code will first setup the connection with the fingerprint sensor by scanning the baudrate the sensor is currently set to. It will then change the baudrate of the sensor to 115200 for best data transfer speed and reset the connection one last time. Finally, we will go into our main loop.</p> <p>If the code cannot establish connection with the sensor, the code would simply end.</p> <pre><code>Code done running.\n\nPress any key to enter the REPL. Use CTRL-D to reload.\n</code></pre>"},{"location":"pythondoc/#calling-functions","title":"Calling Functions","text":"<p>Dart code can call functions by sending</p> <pre><code>\"[Command]\" + \" \"(Optional) + \"[Argument]\"(Optional) + \"\\n\" + \"\\r\"\n</code></pre> <p>when prompted with \"&gt;\" from the Python code. The code python receive this by calling input() with usb_cdc imported.</p> <p>\"\\n\" signals that this is the end of the user input for input(). \"\\r\" signals this is the end of the data so input() can start reading from the serial port.</p> <p>Important: usb_cdc allows the python code to treat the usb connection as a console/terminal, so print() and input() will automatically work on the serial port without the need for any specialise serial read/write functions.</p> <p>Format: &gt;[Command] [Argument]   (Only when dart code is used as a command line interface)</p> <p>Type:</p> <ul> <li>Command: String from '1' to '6'</li> <li>Argument (optional): String from '1' to '120'</li> </ul>"},{"location":"pythondoc/#codepy-api","title":"code.py API","text":""},{"location":"pythondoc/#command-1-enroll-fingerprint-in-slot-argument","title":"Command '1' - Enroll fingerprint in slot \"Argument\"","text":"<p>Input: &gt;1 [slot number] or send \"1 [slot number]\\n\\r\" through serial</p> <p>Output:</p> <pre><code>&gt;1 1              #Enroll finger (command 1) in slot 1\n1 1\nFINGERREQUEST     #Request User to press finger on sensor\nFINGERHOLD        #Request User to hold finger on sensor\nOKIMAGE           #Image taken successfully\nTEMPLATING        #Converting image to template\nOKTEMPLATE        #Image converted to template successfully\nREMOVEFINGER      #Request User to remove finger off sensor\nFINGERREQUEST     #Request User to press finger on sensor\nFINGERHOLD        #Request User to hold finger on sensor\nOKIMAGE           #Image taken successfully\nTEMPLATING        #Converting image to template\nOKTEMPLATE        #Image converted to template successfully\nCREATEMODEL       #Create Model from template for storage\nOKMODEL           #Create Model successfully\nSTOREMODEL        #Storing model on sensor flash memory\nOKSTORAGE         #Model stored successfully\nREADTEMPLATE 1 2  #Display all models stored on sensor by listing its slot. Currently in slot 1 and slot 2.\n&gt;                 #Command/Input request\n</code></pre>"},{"location":"pythondoc/#command-2-identify-fingerprint","title":"Command '2' - Identify fingerprint","text":"<p>Input: &gt;2 or send \"2\\n\\r\" through serial</p> <p>Output:</p> <pre><code>READTEMPLATE 1 2\n&gt;2                #Identify finger\nFINGERREQUEST     #Request User to press finger on sensor\nFINGERHOLD        #Request User to hold finger on sensor\nOKIMAGE           #Image taken successfully\nTEMPLATING        #Converting image to template\nOKTEMPLATE        #Image converted to template successfully\nSEARCHING         #Searching for Model that match template in sensor's flash memory\nOKSEARCH 1 100    #Model found in slot 1 with confidence 100\nREADTEMPLATE 1 2\n&gt;\n</code></pre>"},{"location":"pythondoc/#command-3-delete-fingerprint","title":"Command '3' - Delete fingerprint","text":"<p>Input: &gt;3 [slot number] or send \"3 [slot number]\\n\\r\" through serial</p> <p>Output:</p> <pre><code>READTEMPLATE 1 2\n&gt;3 1              #Delete model in slot 1\nOKDELETE          #Model deleted successfully\nREADTEMPLATE 2\n&gt;\n</code></pre>"},{"location":"pythondoc/#command-4-download-template-to-computer","title":"Command '4' - Download template to computer","text":"<p>Input: &gt;4 or send \"4\\n\\r\" through serial</p> <p>Output:</p> <pre><code>&gt;4\n4                  #Download template into Dart code\nFINGERREQUEST      #Same steps as enroll. Default to slot 1.\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nREMOVEFINGER\nFINGERREQUEST\nFINGERHOLD\nOKIMAGE\nTEMPLATING\nOKTEMPLATE\nCREATEMODEL\nOKMODEL\nSTOREMODEL\nOKSTORAGE\nTEMPDOWNLOAD       #Start downloading template of enrolled fingerprint\nOKDOWNLOAD 2048    #Template downloaded successfully sensor. Length: 2048 bytes\nb'46704c...ffff1f29d8ff40'  #Hex data printed to serial port as String\nREADTEMPLATE 1 2\n&gt;\n</code></pre> <p>Note: In the current version of the Dart code, the template is stored in a variable called templateBuffer with Uint8List type which has a size of 4096 (Double the size of the template as the hex code is represented in String format)</p>"},{"location":"pythondoc/#command-5-upload-template-from-computer-and-verify","title":"Command '5' - Upload template from computer and verify","text":"<p>Input: &gt;5 or sending \"5\\n\\r\" through serial</p> <p>Output:</p> <pre><code>&gt;5                #Upload template to sensor to verify\n5\n46704c...ffff1f29d8ff40 #Data sent by the computer from Dart's templateBuffer\nFINGERREQUEST     #Request User to press finger on sensor\nFINGERHOLD        #Request User to hold finger on sensor\nOKIMAGE           #Image taken successfully\nTEMPLATING        #Converting image to template\nOKTEMPLATE        #Image converted to template successfully\nOKMATCH           #Template match with uploaded template\nREADTEMPLATE 1 2\n&gt;\n</code></pre>"},{"location":"pythondoc/#command-6-clear-all-models-in-sensors-flash-memory","title":"Command '6' - Clear all models in sensor's flash memory","text":"<p>Input: &gt;6 or sending \"6\\n\\r\" through serial</p> <p>Output:</p> <pre><code>READTEMPLATE 1 2\n&gt;6                  #Delete all models in sensor\n6\nOKDELETE            #Deleted successfully\nREADTEMPLATE 0      #No template in sensor\n&gt;\n</code></pre> <p>Note: 0 does not mean there exist a model in slot 0. Slot 0 does not exist and is not a valid slot.</p>"},{"location":"pythondoc/#error-printing","title":"Error Printing","text":"<p>Format: ERROR [error number]</p> Name Hex Code (Decimal) Description PACKETRIEVEERR 0x01 (1) Trouble communicating with sensor NOFINGER 0x02 (2) Finger is not pressed on sensor when taking image IMAGEFAIL 0x03 (3) Imaging error IMAGEMESS 0x06 (6) Image is too messy. Cannot extract features FEATUREFAIL 0x07 (7) Failed to identify fingerprint feature NOTFOUND 0x09 (9) Fingerprint model not in sensor's library ENROLLMISMATCH 0x0A (10) Fingerprint is not the same when taken twice. Cannot generate model BADLOCATION 0x0B (11) Invalid location for operation UPLOADFAIL 0x5B (91) Fail to upload template to sensor INVALIDIMAGE 0x15 (21) Image taken is not a fingerprint. Failed to extract features FLASHERR 0x18 (24) Model could not be written to flash memory SETPARAMFAIL 0x56 (86) Cannot change sensor's parameter settings: baud rate, security level, data package size DOWNLOADFAIL 0x5A (90) Cannot download model from sensor MATCHFAIL 0x5C (92) Fingerprint does not match with uploaded template NUMARGUMENT 0x57 (87) Wrong number of arguments LOCATIONVAL 0x58 (88) Location/slot number argument is invalid. Range: 1-120 WRONGCOMMAND 0x59 (59) Command does not exist"},{"location":"pythondoc/#status-printing","title":"Status Printing","text":"Name Description FINGERREQUEST Request finger to be placed on sensor FINGERHOLD Request finger to be held on sensor TEMPLATING Converting image to template SEARCHING Searching for matching model in sensor's library/flash REMOVEFINGER Request finger to be removed off the sensor CREATEMODEL Creating model from template to be stored STOREMODEL Storing model in sensor's library READTEMPLATE Reading all the model/template stored in the sensor PARAMDETAIL Printing current configuration for sensor (baud rate, security level, data package size) SENSORINIT Establishing connection with sensor and setting sensor's configuration TEMPDOWNLOAD Downloading template from sensor TEMPUPLOAD Uploading template from sensor"},{"location":"pythondoc/#success-code-printing","title":"Success Code Printing","text":"Name Description OKIMAGE Image taken successfully OKTEMPLATE Image converted to template successfully OKMODEL Create model is successful OKSTORAGE Model stored successfully in sensor's library OKDELETE Model deleted successfully OKSEARCH Template is identified. Location and confidence level is printed in that order OKPARAMSET Parameter set successfully for sensor OKDOWNLOAD Download template from sensor successfully. Number of byte is also printed OKMATCH Uploaded template matches with fingerprint. OKUPLOAD Template uploaded to sensor successfully"}]}